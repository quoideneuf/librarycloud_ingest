<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://camel.apache.org/schema/spring 
    http://camel.apache.org/schema/spring/camel-spring.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd" 
    >
    
    <!-- AWS Configuration -->
    <context:property-placeholder  location="classpath:/aws.properties" />
    <bean name="sqsClient" class="com.amazonaws.services.sqs.AmazonSQSAsyncClient">
        <constructor-arg>
            <bean class="com.amazonaws.auth.BasicAWSCredentials">
                <constructor-arg value="${access.key}"/>
                <constructor-arg value="${secret.key}"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- Set a shorter timeout for shutdown, primarily for testing purposes. Default is 300. -->
    <bean id="shutdown" class="org.apache.camel.impl.DefaultShutdownStrategy">  
        <property name="timeout" value="30"/>
    </bean>  

    <!-- Configure display of trace log messages -->
    <bean id="traceFormatter" class="org.apache.camel.processor.interceptor.DefaultTraceFormatter">
        <property name="showBody" value="false"/>
        <property name="showHeaders" value="false"/>
    </bean>
    
    <!-- Add an event notifier to log throughput -->
    <!-- <bean id="eventTimer" class="edu.harvard.libcomm.pipeline.EventTimer"/> -->

    <!-- Definition of beans that handle processing of items in the pipeline -->
	<bean id="marcSplitter" class="edu.harvard.libcomm.pipeline.Splitter">
        <property name="splitter">
            <bean class="edu.harvard.libcomm.pipeline.MarcSplitter"/>
        </property>
    </bean>		

    <bean id="viaSplitter" class="edu.harvard.libcomm.pipeline.Splitter">
        <property name="splitter">
            <bean class="edu.harvard.libcomm.pipeline.VIASplitter"/>
        </property>
    </bean> 

	<!-- <bean id="marcDeleteSplitter" class="edu.harvard.libcomm.pipeline.Splitter">
        <property name="splitter">
            <bean class="edu.harvard.libcomm.pipeline.DeleteFileSplitter"/>
        </property>
    </bean>	-->

    <bean id="modsProcessor" class="edu.harvard.libcomm.pipeline.LibCommProcessor">
        <property name="processor">
            <bean class="edu.harvard.libcomm.pipeline.ModsProcessor"/>
        </property>
    </bean>
    <bean id="holdingsProcessor" class="edu.harvard.libcomm.pipeline.LibCommProcessor">
        <property name="processor">
            <bean class="edu.harvard.libcomm.pipeline.HoldingsProcessor"/>
        </property>
    </bean>

    <bean id="stackscoreProcessor" class="edu.harvard.libcomm.pipeline.LibCommProcessor">
        <property name="processor">
            <bean class="edu.harvard.libcomm.pipeline.StackScoreProcessor"/>
        </property>
    </bean>

    <bean id="publishProcessor" class="edu.harvard.libcomm.pipeline.LibCommProcessor">
        <property name="processor">
            <bean class="edu.harvard.libcomm.pipeline.PublishProcessor"/>
        </property>
    </bean>

    <bean id="solrLoadProcessor" class="edu.harvard.libcomm.pipeline.LibCommProcessor">
        <property name="processor">
            <bean class="edu.harvard.libcomm.pipeline.SolrProcessor">
                <property name="commitWithinTime" value="30000"/>
            </bean>
        </property>
    </bean>

    <camelContext id="sqsContext" xmlns="http://camel.apache.org/schema/spring" trace="true">
        <!-- Environment-specific properties -->
        <propertyPlaceholder id="librarycloud-properties" location="classpath:/librarycloud.env.properties" />

<!-- 
        <route id="aleph-ingest">
            <from uri="file:{{librarycloud.files.basepath}}?include=.*.xml" />
            <split streaming="true">
                <method bean="marcSplitter" method="split"/>
                <to uri="file:{{librarycloud.files.basepath}}/normalize-marcxml?fileName=${header.CamelSplitIndex}"/>
            </split>
         </route>
  
         <route id="aleph-delete-ingest">
            <from uri="file:{{librarycloud.files.basepath}}/deletefiles?include=.*.xml" />
            <split streaming="true">
                <method bean="marcDeleteSplitter" method="split"/>
                <to uri="file:{{librarycloud.files.basepath}}/marc-deletes?fileName=${header.CamelSplitIndex}"/>
            </split>
         </route>
   
         <route id="marctomods">
            <from uri="file:{{librarycloud.files.basepath}}/normalize-marcxml" />
            <process ref="modsProcessor"/>
            <to uri="file:{{librarycloud.files.basepath}}/enrich"/>
        </route>

		<route id="publishtomods">
            <from uri="file:{{librarycloud.files.basepath}}/enrich" />
            <process ref="publishProcessor"/>
            <to uri="file:{{librarycloud.files.basepath}}/publish"/>
 			<log message="holdings added ${file:name}"/>
        </route>

		<route id="publish" >
            <from uri="file://{{librarycloud.files.basepath}}/publish" />
            <process ref="stackscoreProcessor"/>
            <to uri="file://{{librarycloud.files.basepath}}/stackscore" />
        </route>
 --> 
        <route id="via-ingest">
            <from uri="file:{{librarycloud.files.basepath}}/viacommand?include=.*.xml" />
            <split streaming="true">
                <method bean="viaSplitter" method="split"/>
                <to uri="file:{{librarycloud.files.basepath}}/normalized-via?fileName=${header.CamelSplitIndex}"/>            
            </split>
        </route>
        
 		<route id="tosolr" >
            <from uri="file://{{librarycloud.files.basepath}}/normalized-via" />
            <process ref="solrLoadProcessor"/>
            <to uri="file://{{librarycloud.files.basepath}}/tosolr" />
        </route>

             
    </camelContext>
    
    
</beans>

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://camel.apache.org/schema/spring 
    http://camel.apache.org/schema/spring/camel-spring.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd" 
    >
    
    <!-- AWS Configuration -->
    <context:property-placeholder  location="classpath:/aws.properties" />
    <bean name="sqsClient" class="com.amazonaws.services.sqs.AmazonSQSAsyncClient">
        <constructor-arg>
            <bean class="com.amazonaws.auth.BasicAWSCredentials">
                <constructor-arg value="${access.key}"/>
                <constructor-arg value="${secret.key}"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- Set a shorter timeout for shutdown, primarily for testing purposes. Default is 300. -->
    <bean id="shutdown" class="org.apache.camel.impl.DefaultShutdownStrategy">  
        <property name="timeout" value="30"/>
    </bean>  

    <!-- Configure display of trace log messages -->
 <!-- 
    <bean id="traceFormatter" class="org.apache.camel.processor.interceptor.DefaultTraceFormatter">
        <property name="showBody" value="false"/>
        <property name="showHeaders" value="false"/>
    </bean>
-->
    <!-- Definition of beans that handle processing of items in the pipeline -->
	<bean id="marcSplitter" class="edu.harvard.libcomm.pipeline.MarcSplitter"/>		
    <bean id="modsProcessor" class="edu.harvard.libcomm.pipeline.LibCommProcessor">
        <property name="processor">
            <bean class="edu.harvard.libcomm.pipeline.ModsProcessor"/>
        </property>
    </bean>
    <bean id="holdingsProcessor" class="edu.harvard.libcomm.pipeline.LibCommProcessor">
        <property name="processor">
            <bean class="edu.harvard.libcomm.pipeline.HoldingsProcessor"/>
        </property>
    </bean>

    <bean id="publishProcessor" class="edu.harvard.libcomm.pipeline.LibCommProcessor">
        <property name="processor">
            <bean class="edu.harvard.libcomm.pipeline.PublishProcessor"/>
        </property>
    </bean>

    <bean id="solrLoadProcessor" class="edu.harvard.libcomm.pipeline.LibCommProcessor">
        <property name="processor">
            <bean class="edu.harvard.libcomm.pipeline.SolrProcessor"/>
        </property>
    </bean>

    <camelContext id="sqsContext" xmlns="http://camel.apache.org/schema/spring" trace="true">

        <!-- Environment-specific properties -->
        <propertyPlaceholder id="librarycloud-properties" location="classpath:/librarycloud.env.properties" />

 		<!-- 
 		aleph-ingest route reads xml messages from directory that contain corresponding marc (.mrc) files
 		converts marc communication format to marcxml, chunks into files of 25 and writes to specified directory
 		xml messages sent to queue
 		 -->
        <route id="aleph-ingest">
            <from uri="file:{{librarycloud.files.basepath}}?include=.*.xml" />
            <split streaming="true">
                <method bean="marcSplitter" method="splitMarcFile"/>
                <to uri="file:{{librarycloud.files.basepath}}/normalize-marcxml?fileName=${header.CamelSplitIndex}"/>
                <!-- <to uri="aws-sqs://{{librarycloud.sqs.environment}}-normalize-marcxml?accessKey=${access.key}&amp;secretKey=${secret.key}&amp;amazonSQSClient=#sqsClient" />-->
            </split>
         </route>
 
  		<!-- 
 		marctomods route reads marcxml from specified dir, validates, converts marcxml to mods
 		mods wrapped in libcomm message and sent to queue (can be file, aws, etc)
 		 -->         
   
         <route id="marctomods">

            <from uri="file:{{librarycloud.files.basepath}}/normalize-marcxml" />
            <!-- <from uri="aws-sqs://{{librarycloud.sqs.environment}}-normalize-marcxml?accessKey=${access.key}&amp;secretKey=${secret.key}&amp;amazonSQSClient=#sqsClient" /> -->
            <process ref="modsProcessor"/>
            <to uri="file:{{librarycloud.files.basepath}}/enrich"/>
            <!-- <to uri="aws-sqs://{{librarycloud.sqs.environment}}-enrich?accessKey=${access.key}&amp;secretKey=${secret.key}&amp;amazonSQSClient=#sqsClient" /> -->
        </route>


<!-- 	skiping over the enrich (add holdings) step temporarily -->
       
		<route id="addholdingstomods">
            <from uri="file:{{librarycloud.files.basepath}}/enrich" />
            <process ref="holdingsProcessor"/>
            <to uri="file:{{librarycloud.files.basepath}}/publish"/>
            <!-- <to uri="aws-sqs://viaIngest?accessKey=${access.key}&amp;secretKey=${secret.key}&amp;amazonSQSClient=#sqsClient" />-->
 			<log message="holdings added ${file:name}"/>
        </route>
   
 
		<route id="publishtomods">
            <from uri="file:{{librarycloud.files.basepath}}/publish" />
            <process ref="publishProcessor"/>
            <to uri="file:{{librarycloud.files.basepath}}/tosolr"/>
            <!-- <to uri="aws-sqs://viaIngest?accessKey=${access.key}&amp;secretKey=${secret.key}&amp;amazonSQSClient=#sqsClient" />-->
 			<log message="holdings added ${file:name}"/>
        </route>

		<route id="modstosolr">
            <from uri="file:{{librarycloud.files.basepath}}/tosolr" />
            <process ref="solrLoadProcessor"/>
            <to uri="file:{{librarycloud.files.basepath}}/loaded"/>
            <!-- <to uri="aws-sqs://viaIngest?accessKey=${access.key}&amp;secretKey=${secret.key}&amp;amazonSQSClient=#sqsClient" />-->
 			<log message="loaded to solr ${file:name}"/>
        </route>
             
    </camelContext>
    
    
</beans>
